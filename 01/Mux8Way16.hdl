// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux8Way16.hdl

/**
 * 8-way 16-bit multiplexor:
 * out = a if sel == 000
 *       b if sel == 001
 *       etc.
 *       h if sel == 111
 */

CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    Mux(a=a[0],b=b[0],sel=sel[0], out=i0);
    Mux(a=c[0],b=d[0],sel=sel[0], out=j0);
    Mux(a=e[0],b=f[0],sel=sel[0], out=k0);
    Mux(a=g[0],b=h[0],sel=sel[0], out=l0);
    Mux(a=i0,  b=j0,  sel=sel[1], out=m0);
    Mux(a=k0,  b=l0,  sel=sel[1], out=n0);
    Mux(a=m0,  b=n0,  sel=sel[2], out=out[0]);

    Mux(a=a[1],b=b[1],sel=sel[0], out=i1);
    Mux(a=c[1],b=d[1],sel=sel[0], out=j1);
    Mux(a=e[1],b=f[1],sel=sel[0], out=k1);
    Mux(a=g[1],b=h[1],sel=sel[0], out=l1);
    Mux(a=i1,  b=j1,  sel=sel[1], out=m1);
    Mux(a=k1,  b=l1,  sel=sel[1], out=n1);
    Mux(a=m1,  b=n1,  sel=sel[2], out=out[1]);
    
    Mux(a=a[2],b=b[2],sel=sel[0], out=i2);
    Mux(a=c[2],b=d[2],sel=sel[0], out=j2);
    Mux(a=e[2],b=f[2],sel=sel[0], out=k2);
    Mux(a=g[2],b=h[2],sel=sel[0], out=l2);
    Mux(a=i2,  b=j2,  sel=sel[1], out=m2);
    Mux(a=k2,  b=l2,  sel=sel[1], out=n2);
    Mux(a=m2,  b=n2,  sel=sel[2], out=out[2]);
    
    Mux(a=a[3],b=b[3],sel=sel[0], out=i3);
    Mux(a=c[3],b=d[3],sel=sel[0], out=j3);
    Mux(a=e[3],b=f[3],sel=sel[0], out=k3);
    Mux(a=g[3],b=h[3],sel=sel[0], out=l3);
    Mux(a=i3,  b=j3,  sel=sel[1], out=m3);
    Mux(a=k3,  b=l3,  sel=sel[1], out=n3);
    Mux(a=m3,  b=n3,  sel=sel[2], out=out[3]);
    
    Mux(a=a[4],b=b[4],sel=sel[0], out=i4);
    Mux(a=c[4],b=d[4],sel=sel[0], out=j4);
    Mux(a=e[4],b=f[4],sel=sel[0], out=k4);
    Mux(a=g[4],b=h[4],sel=sel[0], out=l4);
    Mux(a=i4,  b=j4,  sel=sel[1], out=m4);
    Mux(a=k4,  b=l4,  sel=sel[1], out=n4);
    Mux(a=m4,  b=n4,  sel=sel[2], out=out[4]);
    
    Mux(a=a[5],b=b[5],sel=sel[0], out=i5);
    Mux(a=c[5],b=d[5],sel=sel[0], out=j5);
    Mux(a=e[5],b=f[5],sel=sel[0], out=k5);
    Mux(a=g[5],b=h[5],sel=sel[0], out=l5);
    Mux(a=i5,  b=j5,  sel=sel[1], out=m5);
    Mux(a=k5,  b=l5,  sel=sel[1], out=n5);
    Mux(a=m5,  b=n5,  sel=sel[2], out=out[5]);
    
    Mux(a=a[6],b=b[6],sel=sel[0], out=i6);
    Mux(a=c[6],b=d[6],sel=sel[0], out=j6);
    Mux(a=e[6],b=f[6],sel=sel[0], out=k6);
    Mux(a=g[6],b=h[6],sel=sel[0], out=l6);
    Mux(a=i6,  b=j6,  sel=sel[1], out=m6);
    Mux(a=k6,  b=l6,  sel=sel[1], out=n6);
    Mux(a=m6,  b=n6,  sel=sel[2], out=out[6]);
    
    Mux(a=a[7],b=b[7],sel=sel[0], out=i7);
    Mux(a=c[7],b=d[7],sel=sel[0], out=j7);
    Mux(a=e[7],b=f[7],sel=sel[0], out=k7);
    Mux(a=g[7],b=h[7],sel=sel[0], out=l7);
    Mux(a=i7,  b=j7,  sel=sel[1], out=m7);
    Mux(a=k7,  b=l7,  sel=sel[1], out=n7);
    Mux(a=m7,  b=n7,  sel=sel[2], out=out[7]);
    
    Mux(a=a[8],b=b[8],sel=sel[0], out=i8);
    Mux(a=c[8],b=d[8],sel=sel[0], out=j8);
    Mux(a=e[8],b=f[8],sel=sel[0], out=k8);
    Mux(a=g[8],b=h[8],sel=sel[0], out=l8);
    Mux(a=i8,  b=j8,  sel=sel[1], out=m8);
    Mux(a=k8,  b=l8,  sel=sel[1], out=n8);
    Mux(a=m8,  b=n8,  sel=sel[2], out=out[8]);
    
    Mux(a=a[9],b=b[9],sel=sel[0], out=i9);
    Mux(a=c[9],b=d[9],sel=sel[0], out=j9);
    Mux(a=e[9],b=f[9],sel=sel[0], out=k9);
    Mux(a=g[9],b=h[9],sel=sel[0], out=l9);
    Mux(a=i9,  b=j9,  sel=sel[1], out=m9);
    Mux(a=k9,  b=l9,  sel=sel[1], out=n9);
    Mux(a=m9,  b=n9,  sel=sel[2], out=out[9]);
    
    Mux(a=a[10],b=b[10],sel=sel[0], out=i10);
    Mux(a=c[10],b=d[10],sel=sel[0], out=j10);
    Mux(a=e[10],b=f[10],sel=sel[0], out=k10);
    Mux(a=g[10],b=h[10],sel=sel[0], out=l10);
    Mux(a=i10,  b=j10,  sel=sel[1], out=m10);
    Mux(a=k10,  b=l10,  sel=sel[1], out=n10);
    Mux(a=m10,  b=n10,  sel=sel[2], out=out[10]);
    
    Mux(a=a[11],b=b[11],sel=sel[0], out=i11);
    Mux(a=c[11],b=d[11],sel=sel[0], out=j11);
    Mux(a=e[11],b=f[11],sel=sel[0], out=k11);
    Mux(a=g[11],b=h[11],sel=sel[0], out=l11);
    Mux(a=i11,  b=j11,  sel=sel[1], out=m11);
    Mux(a=k11,  b=l11,  sel=sel[1], out=n11);
    Mux(a=m11,  b=n11,  sel=sel[2], out=out[11]);
    
    Mux(a=a[12],b=b[12],sel=sel[0], out=i12);
    Mux(a=c[12],b=d[12],sel=sel[0], out=j12);
    Mux(a=e[12],b=f[12],sel=sel[0], out=k12);
    Mux(a=g[12],b=h[12],sel=sel[0], out=l12);
    Mux(a=i12,  b=j12,  sel=sel[1], out=m12);
    Mux(a=k12,  b=l12,  sel=sel[1], out=n12);
    Mux(a=m12,  b=n12,  sel=sel[2], out=out[12]);
    
    Mux(a=a[13],b=b[13],sel=sel[0], out=i13);
    Mux(a=c[13],b=d[13],sel=sel[0], out=j13);
    Mux(a=e[13],b=f[13],sel=sel[0], out=k13);
    Mux(a=g[13],b=h[13],sel=sel[0], out=l13);
    Mux(a=i13,  b=j13,  sel=sel[1], out=m13);
    Mux(a=k13,  b=l13,  sel=sel[1], out=n13);
    Mux(a=m13,  b=n13,  sel=sel[2], out=out[13]);
    
    Mux(a=a[14],b=b[14],sel=sel[0], out=i14);
    Mux(a=c[14],b=d[14],sel=sel[0], out=j14);
    Mux(a=e[14],b=f[14],sel=sel[0], out=k14);
    Mux(a=g[14],b=h[14],sel=sel[0], out=l14);
    Mux(a=i14,  b=j14,  sel=sel[1], out=m14);
    Mux(a=k14,  b=l14,  sel=sel[1], out=n14);
    Mux(a=m14,  b=n14,  sel=sel[2], out=out[14]);
    
    Mux(a=a[15],b=b[15],sel=sel[0], out=i15);
    Mux(a=c[15],b=d[15],sel=sel[0], out=j15);
    Mux(a=e[15],b=f[15],sel=sel[0], out=k15);
    Mux(a=g[15],b=h[15],sel=sel[0], out=l15);
    Mux(a=i15,  b=j15,  sel=sel[1], out=m15);
    Mux(a=k15,  b=l15,  sel=sel[1], out=n15);
    Mux(a=m15,  b=n15,  sel=sel[2], out=out[15]);
}